https://patakino.web.elte.hu/pny2/zh0115/I/slmain.cpp

-------------------------

#ifndef SL__H
#define SL__H

#include <functional>
#include <list>
#include <algorithm>

template <class T, class Comp = std::less<T> >
class SortedList
{

  std::list<T> c;

public:

  void insert( const T& t )
  {
    c.insert(
     std::lower_bound( c.begin(), c.end(), t, Comp() ),
     t );
  }


  int size() const
  {
    return c.size();
  }


  const T& front() const
  {
    return c.front();
  }

};

#endif

-------------------------

#ifndef SL__H
#define SL__H

#include <functional>
#include <list>
#include <algorithm>

template <class T, class Comp = std::less<T> >
class SortedList
{

  std::list<T> c;

public:

  void insert( const T& t )
  {
    c.insert(
     std::lower_bound( c.begin(), c.end(), t, Comp() ),
     t );
  }


  int size() const
  {
    return c.size();
  }


  const T& front() const
  {
    return c.front();
  }


  const T& back() const
  {
    return c.back();
  }


  void remove( const T& t )
  {
    std::pair<typename std::list<T>::iterator,
              typename std::list<T>::iterator> p =
      std::equal_range( c.begin(), c.end(), t, Comp() );
    c.erase( p.first, p.second );
  }
};

#endif

-------------------------

#ifndef SL__H
#define SL__H

#include <functional>
#include <list>
#include <algorithm>

template <class T, class Comp = std::less<T> >
class SortedList
{

  std::list<T> c;

public:

  typedef typename std::list<T>::const_iterator iterator;

  void insert( const T& t )
  {
    c.insert(
     std::lower_bound( c.begin(), c.end(), t, Comp() ),
     t );
  }


  int size() const
  {
    return c.size();
  }


  const T& front() const
  {
    return c.front();
  }


  const T& back() const
  {
    return c.back();
  }


  void remove( const T& t )
  {
    std::pair<typename std::list<T>::iterator,
              typename std::list<T>::iterator> p =
      std::equal_range( c.begin(), c.end(), t, Comp() );
    c.erase( p.first, p.second );
  }


  iterator begin() const
  {
    return c.begin();
  }


  iterator end() const
  {
    return c.end();
  }

};

#endif

-------------------------

#ifndef SL__H
#define SL__H

#include <functional>
#include <list>
#include <algorithm>

template <class T, class Comp = std::less<T> >
class SortedList
{

  std::list<T> c;

public:

  typedef typename std::list<T>::const_iterator iterator;


  template <class Iterator>
  SortedList( Iterator first, Iterator last ): c( first, last )
  {
    c.sort( Comp() );
  }


  SortedList() { }


  void insert( const T& t )
  {
    c.insert(
     std::lower_bound( c.begin(), c.end(), t, Comp() ),
     t );
  }


  int size() const
  {
    return c.size();
  }


  const T& front() const
  {
    return c.front();
  }


  const T& back() const
  {
    return c.back();
  }


  void remove( const T& t )
  {
    std::pair<typename std::list<T>::iterator,
              typename std::list<T>::iterator> p =
      std::equal_range( c.begin(), c.end(), t, Comp() );
    c.erase( p.first, p.second );
  }


  iterator begin() const
  {
    return c.begin();
  }


  iterator end() const
  {
    return c.end();
  }

};

#endif

-------------------------

https://patakino.web.elte.hu/pny2/psmain.cpp

-------------------------

#ifndef PSTACK__H
#define PSTACK__H

#include <functional>
#include <map>
#include <stack>

template <class T, class Pr = int, class Comp = std::less<Pr> >
class priority_stack
{

  typedef std::map<Pr, std::stack<T>, Comp> prs;
  prs ps;

public:

  void push( const Pr& p, const T& t )
  {
    ps[ p ].push( t );
  }


  int size( const Pr& p ) const
  {
    return ps.find( p )->second.size();
  }


  T& top()
  {
    return ps.rbegin()->second.top();
  }


  const T& top() const
  {
    return ps.rbegin()->second.top();
  }
};

#endif

-------------------------

#ifndef PSTACK__H
#define PSTACK__H

#include <functional>
#include <map>
#include <stack>

template <class T, class Pr = int, class Comp = std::less<Pr> >
class priority_stack
{

  typedef std::map<Pr, std::stack<T>, Comp> prs;
  prs ps;

public:

  void push( const Pr& p, const T& t )
  {
    ps[ p ].push( t );
  }


  int size( const Pr& p ) const
  {
    return ps.find( p )->second.size();
  }


  int size() const
  {
    int ret = 0;
    for( typename prs::const_iterator i = ps.begin();
         i != ps.end();
         ++i )
    {
      ret += i->second.size();
    }
    return ret;
  }


  T& top()
  {
    return ps.rbegin()->second.top();
  }


  const T& top() const
  {
    return ps.rbegin()->second.top();
  }

};

#endif

-------------------------

#ifndef PSTACK__H
#define PSTACK__H

#include <functional>
#include <map>
#include <stack>

template <class T, class Pr = int, class Comp = std::less<Pr> >
class priority_stack
{

  typedef std::map<Pr, std::stack<T>, Comp> prs;
  prs ps;

public:

  void push( const Pr& p, const T& t )
  {
    ps[ p ].push( t );
  }


  int size( const Pr& p ) const
  {
    return ps.find( p )->second.size();
  }


  int size() const
  {
    int ret = 0;
    for( typename prs::const_iterator i = ps.begin();
         i != ps.end();
         ++i )
    {
      ret += i->second.size();
    }
    return ret;
  }


  T& top()
  {
    return ps.rbegin()->second.top();
  }


  const T& top() const
  {
    return ps.rbegin()->second.top();
  }


  void pop()
  {
    const Pr& p = ps.rbegin()->first;
    ps.rbegin()->second.pop();
    if( ps.begin()->second.empty() )
    {
      ps.erase( p );
    }
  }

};

#endif