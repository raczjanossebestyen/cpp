#include <iostream>

int main()
{
  int a[] = { 8, 5, 1, 3, 2 };
  std::cout << a[ 0 ] << ' '
            << a[ 1 ] << ' '
            << a[ 2 ] << ' '
            << a[ 3 ] << ' '
            << a[ 4 ] << std::endl;
}

-------------------------

#include <iostream>

int main()
{
  int a[] = { 8, 5, 1, 3, 2 };
  for( int i = 0; i < sizeof( a ) / sizeof( a[ 0 ] ); ++i )
  {
    std::cout << a[ i ] << ' ';
  }
  std::endl( std::cout );
}

-------------------------

#include <iostream>

void inc( int* v, int n )
{
  for( unsigned int i = 0; i < n; ++i )
  {
    ++v[ i ];
  }
}

int main()
{
  int a[] = { 8, 5, 1, 3, 2 };
  inc( a, sizeof( a ) / sizeof( a[ 0 ] ) );
  for( int i = 0; i < sizeof( a ) / sizeof( a[ 0 ] ); ++i )
  {
    std::cout << a[ i ] << ' ';
  }
  std::endl( std::cout );
}

-------------------------

#include <iostream>

void inc( int* v, int n )
{
  for( unsigned int i = 0; i < n; ++i )
  {
    ++v[ i ];
  }
}

template<int N>
void incr( int (&v)[ N ] )
{
  for( unsigned int i = 0; i < N; ++i )
  {
    ++v[ i ];
  }
}

int main()
{
  int a[] = { 8, 5, 1, 3, 2 };
  //inc( a, sizeof( a ) / sizeof( a[ 0 ] ) );
  inc( a, sizeof( a ) / sizeof( a[ 0 ] ) );
  incr( a );
  for( int i = 0; i < sizeof( a ) / sizeof( a[ 0 ] ); ++i )
  {
    std::cout << a[ i ] << ' ';
  }
  std::endl( std::cout );
}

-------------------------

#include <list>
#include <iostream>

int main()
{
  std::list<int> a;
  a.push_back( 6 );
  a.push_back( 2 );
  a.push_back( 5 );
  std::list<int>::iterator i = a.begin();
  ++i;
  std::cout << *i << std::endl;
  *i = 7;
  std::cout << *i << std::endl;
}

-------------------------

#include <iostream>

void inc( int* v, int n )
{
  for( unsigned int i = 0; i < n; ++i )
  {
    ++v[ i ];
  }
}

int main()
{
  int a[] = { 8, 5, 1, 3, 2 };
  inc( a, sizeof( a ) / sizeof( a[ 0 ] ) );
  int* p = a;
  ++p;
  p++;
  *p = 7;
  --p;
  *p = 11;
  for( int i = 0; i < sizeof( a ) / sizeof( a[ 0 ] ); ++i )
  {
    std::cout << a[ i ] << ' ';
  }
  std::endl( std::cout );
}

-------------------------

#include <iostream>

int main()
{
  std::cout << "Hello" + 3 << std::endl;
}

-------------------------

#include <iostream>

int main()
{
  char s[] = "blabla";
  std::cout << "Hello" + 3 << std::endl;
  std::cout << s[ 2 ]
            << *( s + 2 )
            << *( 2 + s )
            << 2[ s ]
            << std::endl;
}

-------------------------

#include <iostream>

void inc( int* v, int n )
{
  for( unsigned int i = 0; i < n; ++i )
  {
    ++v[ i ];
  }
}

int main()
{
  int a[] = { 8, 5, 1, 3, 2 };
  inc( a, sizeof( a ) / sizeof( a[ 0 ] ) );
  int* p = a;
  ++p;
  p++;
  *p = 7;
  --p;
  *p = 11;
  p += 3;
  *p = 221;
  int* q = a + 2;
  *q = 8;
  if( p == q )
  {
    std::cout << "==" << std::endl;
  }
  if( p > q )
  {
    std::cout << "p > q" << std::endl;
  }
  for( int i = 0; i < sizeof( a ) / sizeof( a[ 0 ] ); ++i )
  {
    std::cout << a[ i ] << ' ';
  }
  std::endl( std::cout );
}

-------------------------

#include <iostream>

int strlen_patakino( char* p )
{
  char* q = p;
  while( *q != '\0' )
  {
    ++q;
  }
  return q - p;
}

int main()
{
  std::cout << strlen_patakino( "Hello" ) << std::endl;
}

-------------------------

#include <iostream>
#include <cstring>

int strlen_patakino( char* p )
{
  if( p == 0 )
  {
    return -1;
  }
  char* q = p;
  while( *q != '\0' )
  {
    ++q;
  }
  return q - p;
}

int main()
{
  char* p = 0;
  std::cout << std::strlen( p ) << std::endl; // Segfault
  std::cout << strlen_patakino( "Hello" ) << std::endl;
  std::cout << strlen_patakino( 0 ) << std::endl;
}

-------------------------

#include <iostream>
#include <cstring>

int strlen_patakino( char* p )
{
  if( p == 0 )
  {
    return -1;
  }
  char* q = p;
  while( *q != '\0' )
  {
    ++q;
  }
  return q - p;
}

int main()
{
  char* p = 0;
  // std::cout << std::strlen( p ) << std::endl; // Segfault
  std::cout << strlen_patakino( "Hello" ) << std::endl;
  std::cout << strlen_patakino( 0 ) << std::endl;
  int x = 1234567;
  char ch = 'a';
  int y = 2345678;
  std::cout << strlen_patakino( &ch ) << std::endl;
  std::cout << &ch << std::endl;
}

-------------------------

#include <iostream>
#include <cstring>

int strlen_patakino( char* p )
{
  if( p == 0 )
  {
    return -1;
  }
  char* q = p;
  while( *q = '\0' )
  {
    ++q;
  }
  return q - p;
}

int main()
{
  char* p = 0;
  // std::cout << std::strlen( p ) << std::endl; // Segfault
  std::cout << strlen_patakino( "Hello" ) << std::endl; // Segfault
  std::cout << strlen_patakino( 0 ) << std::endl;
  int x = 1234567;
  char ch = 'a';
  int y = 2345678;
  std::cout << strlen_patakino( &ch ) << std::endl;
  std::cout << &ch << std::endl;
}

-------------------------

#include <iostream>
#include <cstring>

int strlen_patakino( char* p )
{
  if( p == 0 )
  {
    return -1;
  }
  char* q = p;
  while( *q = '\0' )
  {
    ++q;
  }
  return q - p;
}

int main()
{
  char s[] = "kukumuku";
  std::cout << s << std::endl;
  std::cout << strlen_patakino( s ) << std::endl;
  std::cout << s << std::endl;
  std::cout << s + 1 << std::endl;
  char* p = 0;
  // std::cout << std::strlen( p ) << std::endl; // Segfault
  std::cout << strlen_patakino( "Hello" ) << std::endl;
  std::cout << strlen_patakino( 0 ) << std::endl;
  int x = 1234567;
  char ch = 'a';
  int y = 2345678;
  std::cout << strlen_patakino( &ch ) << std::endl;
  std::cout << &ch << std::endl;
}

-------------------------

#include <iostream>
#include <cstring>

int strlen_patakino( const char* p )
{
  if( p == 0 )
  {
    return -1;
  }
  const char* q = p;
  while( *q != '\0' )
  {
    ++q;
  }
  return q - p;
}

int main()
{
  char s[] = "kukumuku";
  std::cout << s << std::endl;
  std::cout << strlen_patakino( s ) << std::endl;
  std::cout << s << std::endl;
  std::cout << s + 1 << std::endl;
  char* p = 0;
  // std::cout << std::strlen( p ) << std::endl; // Segfault
  std::cout << strlen_patakino( "Hello" ) << std::endl;
  std::cout << strlen_patakino( 0 ) << std::endl;
  int x = 1234567;
  char ch = 'a';
  int y = 2345678;
  std::cout << strlen_patakino( &ch ) << std::endl;
  std::cout << &ch << std::endl;
}